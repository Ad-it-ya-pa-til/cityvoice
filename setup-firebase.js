/**
 * Firebase Setup Helper Script
 * 
 * This script helps you encode your Firebase service account key to base64
 * and creates a .env file with the proper configuration.
 * 
 * Usage:
 *   1. Download your service account JSON from Firebase Console
 *   2. Save it in this directory as "serviceAccountKey.json"
 *   3. Run: node setup-firebase.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üî• Firebase Setup Helper for CityVoice\n');
console.log('‚ïê'.repeat(60));

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function main() {
  try {
    // Check if service account file exists
    const defaultPath = path.join(__dirname, 'serviceAccountKey.json');
    let serviceAccountPath = defaultPath;
    
    if (!fs.existsSync(defaultPath)) {
      console.log('\n‚ùå serviceAccountKey.json not found in current directory\n');
      serviceAccountPath = await question('Enter path to your service account JSON file: ');
      
      if (!fs.existsSync(serviceAccountPath)) {
        console.log('\n‚ùå File not found:', serviceAccountPath);
        console.log('\nüìù Instructions:');
        console.log('   1. Go to Firebase Console');
        console.log('   2. Project Settings > Service Accounts');
        console.log('   3. Click "Generate New Private Key"');
        console.log('   4. Save the downloaded file as serviceAccountKey.json');
        console.log('   5. Run this script again\n');
        rl.close();
        return;
      }
    }
    
    console.log('\n‚úÖ Found service account file');
    
    // Read and validate service account JSON
    console.log('\nüìñ Reading service account...');
    const serviceAccountJson = fs.readFileSync(serviceAccountPath, 'utf8');
    const serviceAccount = JSON.parse(serviceAccountJson);
    
    // Validate required fields
    const requiredFields = ['project_id', 'private_key', 'client_email', 'type'];
    const missingFields = requiredFields.filter(field => !serviceAccount[field]);
    
    if (missingFields.length > 0) {
      console.log('\n‚ùå Invalid service account JSON. Missing fields:', missingFields.join(', '));
      rl.close();
      return;
    }
    
    console.log('‚úÖ Service account validated');
    console.log('   Project ID:', serviceAccount.project_id);
    console.log('   Client Email:', serviceAccount.client_email);
    
    // Encode to base64
    console.log('\nüîê Encoding to base64...');
    const base64 = Buffer.from(serviceAccountJson).toString('base64');
    console.log('‚úÖ Encoded successfully');
    
    // Check if .env exists
    const envPath = path.join(__dirname, '.env');
    const envExists = fs.existsSync(envPath);
    
    if (envExists) {
      console.log('\n‚ö†Ô∏è  .env file already exists');
      const overwrite = await question('Do you want to overwrite it? (y/n): ');
      
      if (overwrite.toLowerCase() !== 'y') {
        console.log('\nüìã Here is your base64 encoded service account:');
        console.log('‚îÄ'.repeat(60));
        console.log(base64);
        console.log('‚îÄ'.repeat(60));
        console.log('\nAdd this to your .env file manually as:');
        console.log('FIREBASE_SERVICE_ACCOUNT=' + base64.substring(0, 50) + '...');
        rl.close();
        return;
      }
    }
    
    // Optional: Add Cloudinary credentials
    console.log('\nüì∏ Cloudinary Setup (Optional - press Enter to skip)');
    const cloudName = await question('Cloudinary Cloud Name: ');
    const apiKey = await question('Cloudinary API Key: ');
    const apiSecret = await question('Cloudinary API Secret: ');
    
    // Create .env file
    console.log('\nüìù Creating .env file...');
    const envContent = `# CityVoice Environment Variables
# Generated by setup-firebase.js on ${new Date().toISOString()}

# Server Port
PORT=3000

# Firebase Admin SDK
FIREBASE_SERVICE_ACCOUNT=${base64}

# Cloudinary (Optional - for image uploads)
${cloudName ? `CLOUDINARY_CLOUD_NAME=${cloudName}` : '# CLOUDINARY_CLOUD_NAME=your_cloud_name'}
${apiKey ? `CLOUDINARY_API_KEY=${apiKey}` : '# CLOUDINARY_API_KEY=your_api_key'}
${apiSecret ? `CLOUDINARY_API_SECRET=${apiSecret}` : '# CLOUDINARY_API_SECRET=your_api_secret'}
`;
    
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ .env file created successfully');
    
    // Update .gitignore
    const gitignorePath = path.join(__dirname, '.gitignore');
    let gitignoreContent = '';
    
    if (fs.existsSync(gitignorePath)) {
      gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
    }
    
    const gitignoreEntries = [
      '.env',
      '.env.local',
      'serviceAccountKey.json',
      '*firebase-adminsdk*.json'
    ];
    
    let updated = false;
    gitignoreEntries.forEach(entry => {
      if (!gitignoreContent.includes(entry)) {
        gitignoreContent += '\n' + entry;
        updated = true;
      }
    });
    
    if (updated) {
      fs.writeFileSync(gitignorePath, gitignoreContent);
      console.log('‚úÖ .gitignore updated');
    }
    
    // Success message
    console.log('\n' + '‚ïê'.repeat(60));
    console.log('üéâ Firebase Setup Complete!');
    console.log('‚ïê'.repeat(60));
    console.log('\n‚úÖ Next Steps:');
    console.log('   1. Start your server: node index.js');
    console.log('   2. Look for: "Firebase Admin initialized successfully"');
    console.log('   3. Test API: curl http://localhost:3000/healthz');
    
    console.log('\nüîê Security Reminders:');
    console.log('   ‚Ä¢ Never commit .env to Git');
    console.log('   ‚Ä¢ Delete serviceAccountKey.json after setup');
    console.log('   ‚Ä¢ Keep credentials secure');
    
    console.log('\nüìö For more info, see: FIREBASE_SETUP_GUIDE.md\n');
    
    // Ask if they want to delete the service account JSON
    const deleteJson = await question('Delete serviceAccountKey.json for security? (y/n): ');
    if (deleteJson.toLowerCase() === 'y') {
      fs.unlinkSync(serviceAccountPath);
      console.log('‚úÖ serviceAccountKey.json deleted');
    }
    
  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
    console.error('\nPlease check:');
    console.error('  1. Service account JSON is valid');
    console.error('  2. You have write permissions');
    console.error('  3. File paths are correct');
  } finally {
    rl.close();
  }
}

// Run the script
main();
